{
	"info": {
		"_postman_id": "d624a4ff-76c0-44b4-ab05-b8182ff52cce",
		"name": "udacity-fsnd-udaspicelatte",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32807411"
	},
	"item": [
		{
			"name": "public",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "barista",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}drinks",
							"host": [
								"{{host}}drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZlaGxxRUNaVkR4eFRNX1FSdTNIbiJ9.eyJpc3MiOiJodHRwczovL2Rldi1ucmRlNWxvM2x1ZWprbWkzLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhcHBsZXwwMDAxODMuZWQzMGM2MjJjMTExNGU5MjgxNzMwOTVlYTQxNWZkOGQuMTEyOCIsImF1ZCI6Im15LWNvZmZlZSIsImlhdCI6MTcwNzIzOTc3MywiZXhwIjoxNzA3MjQ2OTczLCJhenAiOiJVZDkxY24wVDdSSXRzNWZ2NUE4alNtQndlN3NFQmViYSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZ2V0OmRyaW5rcyIsImdldDpkcmlua3MtZGV0YWlsIl19.ccj3C0SCcliXBSLRwQvgV6n-SAqbeNstEx-FVNM35hyYPUClraD6FFQ5j-IU8VV71vKcZBy5QNdS1SW2UWVaXndw8FRKDiZoUXQbrHR_mCrZptBi_mW9LUF3vbzywiDofbX2cxV86XCbzCSbTcRX2qFUmBzlo9iN-lKCPZTBlIhkU8k-rrTWg6kKhxiXu-L-txDPnNKG-DXDSsw6jDk1t6mw_-Az5xxQWTO7RNhEUNbHlWmKhvEyKCnWYeJfsIuaco1QbK8sRIQvPJSAJSnmuGlSbZv-sFSMI25bl0oXE-nST2mVxv11bOYMobTYbqvIgXFTSLxvrloDcLhROZPlpA",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "manager",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Water3\",\n    \"recipe\": {\n        \"name\": \"Water\",\n        \"color\": \"blue\",\n        \"parts\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Water5\"\n}"
						},
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"drinks",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZlaGxxRUNaVkR4eFRNX1FSdTNIbiJ9.eyJpc3MiOiJodHRwczovL2Rldi1ucmRlNWxvM2x1ZWprbWkzLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NWMyMjc0NDQ1ZWFlZjVjMTkxOWI0NTciLCJhdWQiOiJteS1jb2ZmZWUiLCJpYXQiOjE3MDcyMzk4MTQsImV4cCI6MTcwNzI0NzAxNCwiYXpwIjoiVWQ5MWNuMFQ3Ukl0czVmdjVBOGpTbUJ3ZTdzRUJlYmEiLCJzY29wZSI6IiIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTpkcmlua3MiLCJnZXQ6ZHJpbmtzIiwiZ2V0OmRyaW5rcy1kZXRhaWwiLCJwYXRjaDpkcmlua3MiLCJwb3N0OmRyaW5rcyJdfQ.Xh6z83MbjB1FaiqdM1gLTYvTXjxDZO4hUPR6PC5uf2rPlTzqGWPw-wif4RRrTxxRwPl2NrzxP-RTpB7lP6p9WL7gT5aJ1ssjYUP5E31MTF8iVyKKdZXkLbhZkF_sBtaevKC_HSVLJ0LrBHwvYOzpK46RdvNDwvqCF0jdljJat5nAlGACqAnfzmul9OUjZBKhDiiGtVWpD56q4i5hG0B-_exiR9wNOMxL1rbHZoxDhF3HYIpXrDKHNsTsTpwnaVk9_4II-CwzuzcH9FIje1q8a48zh8Fy7AmlXQ5mXTWNwlZ2qRr0ZztnywU4AYypFA9PBunXgAbl-qOA-9HTLxXV-g",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "secret",
				"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZlaGxxRUNaVkR4eFRNX1FSdTNIbiJ9.eyJpc3MiOiJodHRwczovL2Rldi1ucmRlNWxvM2x1ZWprbWkzLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhcHBsZXwwMDAxODMuZWQzMGM2MjJjMTExNGU5MjgxNzMwOTVlYTQxNWZkOGQuMTEyOCIsImF1ZCI6Im15LWNvZmZlZSIsImlhdCI6MTcwNzIyMjgyMCwiZXhwIjoxNzA3MjMwMDIwLCJhenAiOiJVZDkxY24wVDdSSXRzNWZ2NUE4alNtQndlN3NFQmViYSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZ2V0OmRyaW5rcyIsImdldDpkcmlua3MtZGV0YWlsIl19.OZDneLK7HtH7vZlhUugzfq2tW2x2B0rboJmfHB43oy7a6NxT8ZMN0M09B9DemSTKkOwzJd1G0XhS1bBV-T7kH9I2BAL1Bf1jWifr5xFg6MUvN37gRlb_6Q2Noln-3GUZTxjcV_wUJY0WuRZ_s22h3D-biNCAdqjQ3LRGUg_luvUhe1EN5-GEdfF3X1ZkxVGKK1D4NQQeTlQlSI_R-utpcaAbLuvrby5knSRUpXknjMroX0JNNA-70lmCXpTwrhDH33CbqFiUDySJQYhtf1iBTMfrssaGbF-PmRuIsiMngf7alVHreB3uZ-cLyZ3A_vg3fd5gBEBQFsWI9onMT6bggg",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "HS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "payload",
				"value": "{}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			},
			{
				"key": "header",
				"value": "{}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1:5000/",
			"type": "string"
		}
	]
}